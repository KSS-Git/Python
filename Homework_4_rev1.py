from functools import reduce
from sys import argv
from itertools import count, cycle

# Задача №1
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной
# платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в
# час) + премия. Для выполнения расчета для конкретных значений необходимо запускать
# скрипт с параметрами.


script_name, my_hours, my_rate, my_bonus = argv
# параметры вводил с консоли pycharm

print('Имя скрипта: ', script_name)
print('Количество часов: ', my_hours)
print('Ставка оклада: ', my_rate)
print('Премия: ', my_bonus)


def my_salary():
    return int(my_hours) * int(my_rate) + int(my_bonus)


print('Заработная плата: ', my_salary())


# Задача №2
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения
# которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для
# формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

source_list_2 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
res_list_2 = []
for el in range(1, len(source_list_2)):
    if source_list_2[el] > source_list_2[el-1]:
        res_list_2.append(source_list_2[el])

print(res_list_2)
# С генератором не получилось, подумаю ещё, как выражение составить

# Задача №3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить
# задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

res_list = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(res_list)
# вывод результата является второй строкой решения?  ))

# Задача №4
# Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в
# порядке их следования в исходном списке. Для выполнения задания обязательно
# использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


source_list_4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res_list_4 = [i for i in source_list_4 if source_list_4.count(i) == 1]
print(res_list_4)

# Задача №5
# Реализовать формирование списка, используя функцию range() и возможности генератора. В
# список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


def my_func(num, next_num):
    return num * next_num


my_list_5 = [el for el in range(100, 1002, 2)]

print(reduce(my_func, my_list_5))

# Не успеваю ко времени сдачи задания.
# Сдаю 5 задач,  доделаю 6 и 7 и обновлю на GitHub

# Задача №6
# Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools . Обратите внимание, что
# создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10
# завершаем цикл. Во втором также необходимо предусмотреть условие, при котором
# повторение элементов списка будет прекращено.

my_count = 0
list_temp = []
for el_6 in count(3):
    if el_6 > 10:
        break
    list_temp.append(el_6)
print(list_temp)

for i in cycle(list_temp):
    if my_count > 20:
        break
    print(i)
    my_count += 1


# Задача №7
# Реализовать генератор с помощью функции с ключевым словом yield , создающим очередное
# значение. При вызове функции должен создаваться объект-генератор. Функция должна
# вызываться следующим образом: for el in fact(n) . Функция отвечает за получение факториала
# числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
# четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(my_num):
    mul_temp = 1
    my_list_7 = []
    isinstance(my_num, int)
    for el_7 in count(1):
        if el_7 > my_num:
            break
        my_list_7.append(el_7)
#    print(my_list_7)
    for i in my_list_7:
        mul_temp = mul_temp * int(i)
        yield mul_temp


my_count = 0
n = int(input('Введите любое число: '))
for el in fact(n):
    print(f'Факториал {my_count + 1} - {el}')
    if my_count == n:
        break
    my_count += 1
